"""
Задание 2.
Предложите фундаментальные варианты оптимизации памяти
 и доказать (наглядно, кодом, если получится) их эффективность

Например, один из вариантов, использование генераторов
"""
"""
Задание 3 *.
Сделать профилировку для скриптов с рекурсией и сделать описание,
можно ли так профилировать и есть ли 'подводные камни' в профилировании?
Придумать как это решить!
Есть очень простое решение!
"""
"""
когда профилируется рекурсия создаются много таблицы и поэтому я создала отдельную функцию , фукция котороя возврашает выход из рекурсии 
и декаратор поставила туда 
"""

from memory_profiler import profile
@profile()
def calc1(s):

        return

def calc():
    s = input("Знак (+,-,*,/): ")

    if s == '0':
        calc1(s)


    if s in ('+', '-', '*', '/'):
        x = float(input("x="))
        y = float(input("y="))
        if s == '+':
            print("%.2f" % (x + y))
            return calc()
        elif s == '-':
            print("%.2f" % (x - y))
            return calc()
        elif s == '*':
            print("%.2f" % (x * y))
            return calc()

        elif s == '/':
            if y != 0:
                print("%.2f" % (x / y))

            else:
                print("Деление на ноль!")
            return calc()

        else:
            print("Неверный знак операции!")
            return calc()

print(calc())
